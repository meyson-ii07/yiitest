<?php

namespace app\models;

use app\models\ProductPhoto;
use Yii;

//TODO: remove max_price
/**
 * This is the model class for table "product_auction".
 *
 * @property int $id
 * @property string $name
 * @property int $category_id
 * @property string $current_price
 * @property string $description
 * @property string $created_at
 * @property string $updated_at
 * @property int $cartId
 * @property Category $category
 * @property ProductPhoto[] $productPhotos
 * @property Review[] $reviews
 * @property string $cartColor
 * @property integer $cartQuantity
 */

class ProductAuction extends \yii\db\ActiveRecord
{
   public $images = null;
   public $category_name = null;
    public function __construct()
    {
        $this->category_name = Category::categoryName($this->category_id);
        $this->images = ProductPhoto::findByProductId($this->id);
        if ($this->current_price == 0)
        {
            $this->current_price = $this->start_price;
        }
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'product_auction';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'category_id', 'start_price', 'description'], 'required'],
            [['category_id'], 'integer'],
            [['start_price'], 'number'],
            [['created_at', 'updated_at'], 'safe'],
            [['name'], 'string', 'max' => 32],
            [['description'], 'string', 'max' => 1000],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => Category::class, 'targetAttribute' => ['category_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'category_id' => 'Category ID',
            'price' => 'Price',
            'description' => 'Description',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public  static  function findProductById($id)
    {
        $product=self::find()->where(['id'=>$id])->one();
        if ($product === null) return null;
        return $product;
    }

    public static function findProductByName($name)
    {
        $product=self::find()->where(['name'=>$name])->all();
        if ($product === null) return null;
        return $product;
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductPhotos()
    {
        return $this->hasMany(ProductPhoto::class, ['product_id' => 'id']);
    }

    public function checkIfExist($product)
    {
        self::find()->where(['name'=>$product->name])->one();
        if(exists===true)
        {
            $product->update();
        }
        else
        {
            $product->save();
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReviews()
    {
        return $this->hasMany(Review::class, ['product_id' => 'id']);
    }
    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function isNew()
    {
        $result = date_diff(new \DateTime(), new \DateTime($this->created_at))->days;
        if ($result<=30)
        {
            return true;
        }
        else
            return false;

    }

}
