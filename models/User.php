<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "{{%user}}".
 *
 * @property int $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_hash_confirm
 * @property string $password_reset_token
 * @property string $email
 * @property int $status
 * @property string $created_at
 * @property string $updated_at
     * @property string $AccessToken
 *
 * @property PostUser[] $postUsers
 * @property Posts[] $posts
 */
class User extends \yii\db\ActiveRecord implements \yii\web\IdentityInterface
{

    public static function findByUsername($username)
    {
        $user = self::find()->where(['username' => $username])->one();
        if ($user === null) return null;
        return new static($user);

    }

    public static function findIdentity($id)
    {
        $user = self::find()->where(["id" => $id])->one();
        if ($user == null) {
            return null;
        }
        return new static($user);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        $user = self::find()->where(["AccessToken" => $token])->one();
        if ($user == null) {
            return null;
        }
        return new static($user);

    }

    public function getId()
    {
        return $this->id;
    }

    public function getAuthKey()
    {
        return $this->auth_key;
    }

    public function validateAuthKey($authKey)
    {
        return $this->auth_key === $authKey;
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username', 'password_hash', 'email'], 'required'],
            [['status'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['username', 'auth_key'], 'string', 'max' => 32],
            [['password_hash', 'password_reset_token', 'email'], 'string', 'max' => 255],
            [['username'], 'unique'],
            [['email'], 'unique'],
            [['password_reset_token'], 'unique'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Username',
            'auth_key' => 'Auth Key',
            'password_hash' => 'Password Hash',
            'password_hash_confirm'=>'Confirm password',
            'password_reset_token' => 'Password Reset Token',
            'email' => 'Email',
            'status' => 'Status',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostUsers()
    {
        return $this->hasMany(PostUser::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPosts()
    {
        return $this->hasMany(Posts::className(), ['id' => 'post_id'])->viaTable('{{%post_user}}', ['user_id' => 'id']);
    }

    public function validatePassword($password)
    {
//        echo $this->password_hash;
        return password_verify($password . Yii::$app->params['SALT'], $this->password_hash);
//        return $this->password_hash === password_hash($password . Yii::$app->params['SALT'], PASSWORD_ARGON2I);
    }

    public function beforeSave($insert)
    {
//        if ($insert == true)
        $this->password_hash = password_hash($this->password_hash . Yii::$app->params['SALT'], PASSWORD_ARGON2I);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}